# -*- coding: utf-8 -*-
"""streamlit.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GbmMyLBXJGGcM6Vz8JYYBmD4A1fjv9uk
"""

import streamlit as st
import os
import fitz  # PyMuPDF
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

st.title("PDF Similarity Calculator")

# User input for keywords and PDF directory
keywords = st.text_input("Enter keywords (comma-separated):")
pdf_directory = st.text_input("Enter the path to the directory containing PDF files:")

if st.button("Calculate Similarity"):
    keywords = [keyword.strip() for keyword in keywords.split(',')]
    pdf_data = []

    # Function to extract text from a PDF file using PyMuPDF (fitz)
    def extract_text_from_pdf(pdf_path):
        text = ""
        with fitz.open(pdf_path) as doc:
            for page in doc:
                text += page.get_text()
        return text

    # Loop through all PDF files in the directory and extract text
    for filename in os.listdir(pdf_directory):
        if filename.endswith('.pdf'):
            pdf_path = os.path.join(pdf_directory, filename)
            pdf_text = extract_text_from_pdf(pdf_path)
            pdf_data.append((filename, pdf_text))

    if not pdf_data:
        st.warning("No PDF files found in the specified directory.")
    else:
        # Create a TF-IDF vectorizer
        tfidf_vectorizer = TfidfVectorizer()

        # Fit and transform the text data using TF-IDF
        tfidf_matrix = tfidf_vectorizer.fit_transform([text for (_, text) in pdf_data])

        # Transform the keywords using TF-IDF
        keyword_matrix = tfidf_vectorizer.transform(keywords)

        # Calculate the cosine similarity between PDFs and keywords
        similarities = cosine_similarity(tfidf_matrix, keyword_matrix)

        # Create a list of PDFs with their filenames, maximum similarity scores, and associated keywords
        pdf_max_similarities = []
        for i in range(len(pdf_data)):
            pdf_filename, pdf_text = pdf_data[i]
            max_similarity = max(similarities[i])
            keyword_index = similarities[i].argmax()
            keyword = keywords[keyword_index]
            pdf_max_similarities.append((pdf_filename, max_similarity, keyword))

        # Sort the PDFs by maximum similarity in descending order
        pdf_max_similarities.sort(key=lambda x: x[1], reverse=True)

        # Display the sorted PDFs along with their maximum similarity scores and associated keywords
        for pdf, similarity, keyword in pdf_max_similarities:
            st.write(f"File Name: {pdf}")
            st.write(f"Maximum Similarity with Keyword '{keyword}': {similarity}")
            st.write("----")

